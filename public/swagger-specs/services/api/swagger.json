{
    "swagger": "2.0",
    "info": {
        "description": "ConsenSys Codefi Orchestrate API. Enables dynamic management of transactions, identities, chains, faucets and contracts.\nTransaction Requests are an abstraction over schedules and jobs representing one or more transactions executed on the Blockchain network\nSchedules are ordered lists of jobs executed in a predefined sequence\nJobs represent single transaction flows executed on the Blockchain network\nChains represent list of endpoints pointing to a Blockchain network\nFaucets represent funded accounts (holding ETH) linked to specific chains, allowed to fund newly created accounts automatically for them to be able to send transactions.\nAccounts represent Ethereum accounts (private keys). By usage of the generated cryptographic key pair, accounts can be used to sign/verify and to encrypt/decrypt messages.\nContracts represent Solidity contracts management.",
        "title": "Orchestrate API",
        "contact": {
            "name": "Contact ConsenSys Codefi Orchestrate",
            "url": "https://consensys.net/codefi/orchestrate/contact",
            "email": "orchestrate@consensys.net"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "paths": {
        "/accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of filtered accounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Search accounts by provided filters",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of account aliases",
                        "name": "aliases",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of identities found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.AccountResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid filter in the request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Creates a new Account",
                "parameters": [
                    {
                        "description": "Account creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account object",
                        "schema": {
                            "$ref": "#/definitions/api.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new Account by importing a private key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Creates a new Account by importing a private key",
                "parameters": [
                    {
                        "description": "Account creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ImportAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account object",
                        "schema": {
                            "$ref": "#/definitions/api.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Not allowed",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/verify-message": {
            "post": {
                "description": "Verifies if a message has been signed by the Ethereum account passed as argument",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Verifies the signature of a message (EIP-191)",
                "parameters": [
                    {
                        "description": "signature and message to verify",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.VerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/verify-typed-data": {
            "post": {
                "description": "Verifies if a typed data message has been signed by the Ethereum account passed as argument following the EIP-712 standard",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Verifies the signature of a typed data message following the EIP-712 standard",
                "parameters": [
                    {
                        "description": "Typed data to sign",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.VerifyTypedDataRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{address}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single account by address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Fetch a account by address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "selected account address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account found",
                        "schema": {
                            "$ref": "#/definitions/api.AccountResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update a specific account by Address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Update account by Address",
                "parameters": [
                    {
                        "description": "Account update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateAccountRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "selected account address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account found",
                        "schema": {
                            "$ref": "#/definitions/api.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{address}/sign-message": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Sign message, following EIP-191, data using selected account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Sign Message (EIP-191)",
                "parameters": [
                    {
                        "description": "Payload to sign",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SignMessageRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "selected account address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{address}/sign-typed-data": {
            "post": {
                "description": "Signs typed data using ECDSA and the private key of an existing account following the EIP-712 standard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Signs typed data using an existing account following the EIP-712 standard",
                "parameters": [
                    {
                        "description": "Typed data to sign",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SignTypedDataRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "selected account address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chains": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chains"
                ],
                "summary": "Retrieves a list of all registered chains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/api.ChainResponse"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "privateTxManager": {
                                                "$ref": "#/definitions/entities.PrivateTxManager"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chains"
                ],
                "summary": "Registers a new chain",
                "parameters": [
                    {
                        "description": "Chain registration request.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.RegisterChainRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "listener": {
                                            "$ref": "#/definitions/api.RegisterListenerRequest"
                                        },
                                        "privateTxManager": {
                                            "$ref": "#/definitions/api.PrivateTxManagerRequest"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.ChainResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "privateTxManager": {
                                            "$ref": "#/definitions/entities.PrivateTxManager"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chains/{uuid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chains"
                ],
                "summary": "Retrieves a chain by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the chain",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.ChainResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "privateTxManager": {
                                            "$ref": "#/definitions/entities.PrivateTxManager"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Chain not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chains"
                ],
                "summary": "Deletes a chain by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the chain",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Chain not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chains"
                ],
                "summary": "Updates a chain by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the chain",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chain update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.UpdateChainRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "listener": {
                                            "$ref": "#/definitions/api.UpdateListenerRequest"
                                        },
                                        "privateTxManager": {
                                            "$ref": "#/definitions/api.PrivateTxManagerRequest"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.ChainResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "privateTxManager": {
                                            "$ref": "#/definitions/entities.PrivateTxManager"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Chain not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/contracts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Returns a list of all registered contracts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contracts"
                ],
                "summary": "Returns a list of all registered contracts",
                "responses": {
                    "200": {
                        "description": "Registered contract List",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Register new solidity contract in Orchestrate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contracts"
                ],
                "summary": "Register new solidity contract",
                "parameters": [
                    {
                        "description": "Contract register request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RegisterContractRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.ContractResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "constructor": {
                                            "$ref": "#/definitions/entities.ABIComponent"
                                        },
                                        "events": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.ABIComponent"
                                            }
                                        },
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.ABIComponent"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/contracts/accounts/{chain_id}/{address}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Retrieve events using hash of signature",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contracts"
                ],
                "summary": "Set the codeHash of the given contract address",
                "parameters": [
                    {
                        "description": "Contract code hash request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SetContractCodeHashRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "contract deployed address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "network chain id",
                        "name": "chain_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/contracts/accounts/{chain_id}/{address}/events": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Retrieve events using hash of signature",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contracts"
                ],
                "summary": "Retrieve events using hash of signature",
                "parameters": [
                    {
                        "type": "string",
                        "description": "contract deployed address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "network chain id",
                        "name": "chain_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "event sigh hash value",
                        "name": "sign_hash",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events",
                        "schema": {
                            "$ref": "#/definitions/api.GetContractEventsBySignHashResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Events not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/contracts/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Search contract by codeHash or signHash",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contracts"
                ],
                "summary": "Search contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "contract code hash",
                        "name": "code_hash",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract object",
                        "schema": {
                            "$ref": "#/definitions/api.ContractResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/contracts/{name}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Returns a list of all tags from given contract name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contracts"
                ],
                "summary": "Returns a list of all tags",
                "responses": {
                    "200": {
                        "description": "List of tags",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "contract not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/contracts/{name}/{tag}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch solidity contract data by {name} and {tag}",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contracts"
                ],
                "summary": "Fetch registered contract data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "solidity contract registered name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "solidity contract registered tag",
                        "name": "tag",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.ContractResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "constructor": {
                                            "$ref": "#/definitions/entities.ABIComponent"
                                        },
                                        "events": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.ABIComponent"
                                            }
                                        },
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/entities.ABIComponent"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Contract not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faucets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faucets"
                ],
                "summary": "Retrieves a list of all registered faucets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.FaucetResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faucets"
                ],
                "summary": "Registers a new faucet",
                "parameters": [
                    {
                        "description": "Faucet registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RegisterFaucetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.FaucetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faucets/{uuid}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faucets"
                ],
                "summary": "Retrieves a faucet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the faucet",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.FaucetResponse"
                        }
                    },
                    "404": {
                        "description": "Faucet not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "tags": [
                    "Faucets"
                ],
                "summary": "Deletes a faucet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the faucet",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Faucet not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Faucets"
                ],
                "summary": "Updates a faucet by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the faucet",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Faucet update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateFaucetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.FaucetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Faucet not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of filtered jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Search jobs by provided filters",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of transaction hashes",
                        "name": "tx_hashes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Chain UUID",
                        "name": "chain_uuid",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Jobs found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/api.JobResponse"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "annotations": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/definitions/api.Annotations"
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "gasPricePolicy": {
                                                                "allOf": [
                                                                    {
                                                                        "$ref": "#/definitions/api.GasPriceParams"
                                                                    },
                                                                    {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "retryPolicy": {
                                                                                "$ref": "#/definitions/api.RetryParams"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "logs": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/entities.Log"
                                                }
                                            },
                                            "transaction": {
                                                "$ref": "#/definitions/entities.ETHTransaction"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid filter in the request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new job as part of an already created schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Creates a new Job",
                "parameters": [
                    {
                        "description": "Job creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.CreateJobRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "annotations": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/api.Annotations"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "gasPricePolicy": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/api.GasPriceParams"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "retryPolicy": {
                                                                            "$ref": "#/definitions/api.RetryParams"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "transaction": {
                                            "$ref": "#/definitions/entities.ETHTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created Job",
                        "schema": {
                            "$ref": "#/definitions/api.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobs/{uuid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single job by uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Fetch a job by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the job",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.JobResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "annotations": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/api.Annotations"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "gasPricePolicy": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/api.GasPriceParams"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "retryPolicy": {
                                                                            "$ref": "#/definitions/api.RetryParams"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update a specific job by UUID\nWARNING: Reserved for advanced users. Orchestrate does not recommend using this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Update job by UUID",
                "parameters": [
                    {
                        "description": "Job update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.UpdateJobRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "annotations": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/api.Annotations"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "gasPricePolicy": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/api.GasPriceParams"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "retryPolicy": {
                                                                            "$ref": "#/definitions/api.RetryParams"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "transaction": {
                                            "$ref": "#/definitions/entities.ETHTransaction"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job found",
                        "schema": {
                            "$ref": "#/definitions/api.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Job in invalid state for the given status update",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobs/{uuid}/resend": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Resend transaction of specific job by UUID, effectively executing the re-sending of transaction asynchronously",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Resend Job transaction by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the job",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobs/{uuid}/start": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Starts a specific job by UUID, effectively executing the transaction asynchronously",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Start a Job by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the job",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get all schedules",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get all schedules",
                "responses": {
                    "200": {
                        "description": "List of schedules found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.ScheduleResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Creates a new Schedule",
                "parameters": [
                    {
                        "description": "Schedule creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created schedule",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.ScheduleResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "jobs": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/api.JobResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedules/{uuid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single schedule by uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Fetch a schedule by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the schedule",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule found",
                        "schema": {
                            "$ref": "#/definitions/api.ScheduleResponse"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of filtered transaction requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Search transaction requests by provided filters",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of idempotency keys",
                        "name": "idempotency_keys",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transaction requests found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.TransactionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid filter in the request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/deploy-contract": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new contract deployment request\nThe transaction can be private (Tessera, EEA).\nThe transaction can be a One Time Key transaction in 0 gas private networks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a new contract deployment",
                "parameters": [
                    {
                        "description": "Deployment transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.DeployContractRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/api.DeployContractParams"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "gasPricePolicy": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/api.GasPriceParams"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "retryPolicy": {
                                                                            "$ref": "#/definitions/api.RetryParams"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created deployment transaction request",
                        "schema": {
                            "$ref": "#/definitions/api.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/send": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new smart contract transaction request\nThe transaction can be private (Tessera, EEA).\nThe transaction can be a One Time Key transaction in 0 gas private networks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a new contract transaction",
                "parameters": [
                    {
                        "description": "Contract transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.SendTransactionRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/api.TransactionParams"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "gasPricePolicy": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/api.GasPriceParams"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "retryPolicy": {
                                                                            "$ref": "#/definitions/api.RetryParams"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created contract transaction request",
                        "schema": {
                            "$ref": "#/definitions/api.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/send-raw": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new raw transaction request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a raw transaction",
                "parameters": [
                    {
                        "description": "Raw transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.RawTransactionRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/api.RawTransactionParams"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "retryPolicy": {
                                                            "$ref": "#/definitions/api.IntervalRetryParams"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created raw transaction request",
                        "schema": {
                            "$ref": "#/definitions/api.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/transfer": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates and executes a new transfer request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Creates and sends a transfer transaction",
                "parameters": [
                    {
                        "description": "Transfer transaction request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.TransferRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "params": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/api.TransferParams"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "gasPricePolicy": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/api.GasPriceParams"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "retryPolicy": {
                                                                            "$ref": "#/definitions/api.RetryParams"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Created transfer transaction request",
                        "schema": {
                            "$ref": "#/definitions/api.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Already existing transaction",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable parameters were sent",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/{uuid}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single transaction request by uuid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Fetch a transaction request by uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the transaction request",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction request found",
                        "schema": {
                            "$ref": "#/definitions/api.TransactionResponse"
                        }
                    },
                    "404": {
                        "description": "Transaction request not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/{uuid}/call-off": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Call of transaction  by sending empty data transaction with same nonce and additional 10% more gas",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Call of transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the transaction request",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Transaction request not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/{uuid}/speed-up": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Speed up transaction time by an increase its gas price",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Speed up transaction timeIncrease transaction gas price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of the transaction request",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "gas price increment percentage, default value is 0.05 (5%)",
                        "name": "increment",
                        "in": "query"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Transaction request not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AccountResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "compressedPublicKey": {
                    "type": "string",
                    "example": "0x048e66b3e549818ea2cb354fb70749f6c8de8fa484f7530fc447"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "ownerID": {
                    "type": "string",
                    "example": "foo"
                },
                "publicKey": {
                    "type": "string",
                    "example": "0x048e66b3e549818ea2cb354fb70749f6c8de8fa484f7530fc447d5fe80a1c424e4f5ae648d648c980ae7095d1efad87161d83886ca4b6c498ac22a93da5099014a"
                },
                "storeID": {
                    "type": "string",
                    "example": "myQKMStoreID"
                },
                "tenantID": {
                    "type": "string",
                    "example": "tenantFoo"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                }
            }
        },
        "api.Annotations": {
            "type": "object",
            "properties": {
                "gasPricePolicy": {
                    "$ref": "#/definitions/api.GasPriceParams"
                },
                "hasBeenRetried": {
                    "type": "boolean",
                    "example": false
                },
                "oneTimeKey": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "api.ChainResponse": {
            "type": "object",
            "properties": {
                "chainID": {
                    "description": "[Ethereum chain ID](https://besu.hyperledger.org/en/latest/Concepts/NetworkID-And-ChainID/).",
                    "type": "string",
                    "example": "2445"
                },
                "createdAt": {
                    "description": "Date and time at which the chain was registered.",
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "labels": {
                    "description": "List of custom labels.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "listenerBackOffDuration": {
                    "description": "Time to wait before trying to fetch a new mined block.",
                    "type": "string",
                    "example": "5s"
                },
                "listenerCurrentBlock": {
                    "description": "Current block.",
                    "type": "integer",
                    "example": 0
                },
                "listenerDepth": {
                    "description": "Block depth after which the Transaction Listener considers a block final and processes it.",
                    "type": "integer",
                    "example": 0
                },
                "listenerExternalTxEnabled": {
                    "description": "Whether the chain listens for external transactions not crafted by Orchestrate.",
                    "type": "boolean",
                    "example": false
                },
                "listenerStartingBlock": {
                    "description": "Block at which the Transaction Listener starts processing transactions",
                    "type": "integer",
                    "example": 5000
                },
                "name": {
                    "description": "Name of the chain.",
                    "type": "string",
                    "example": "mainnet"
                },
                "ownerID": {
                    "description": "ID of the chain owner.",
                    "type": "string",
                    "example": "foo"
                },
                "privateTxManager": {
                    "$ref": "#/definitions/entities.PrivateTxManager"
                },
                "tenantID": {
                    "description": "ID of the tenant executing the API.",
                    "type": "string",
                    "example": "tenant"
                },
                "updatedAt": {
                    "description": "Date and time at which the chain details were updated.",
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "urls": {
                    "description": "URLs of Ethereum nodes connected to.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "https://mainnet.infura.io/v3/a73136601e6f4924a0baa4ed880b535e"
                    ]
                },
                "uuid": {
                    "description": "UUID of the registered chain.",
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "api.ContractResponse": {
            "type": "object",
            "properties": {
                "abi": {
                    "type": "string",
                    "example": "[{anonymous: false, inputs: [{indexed: false, name: account, type: address}, name: MinterAdded, type: event}]}]"
                },
                "bytecode": {
                    "type": "string",
                    "example": "0x6080604052348015600f57600080f..."
                },
                "constructor": {
                    "$ref": "#/definitions/entities.ABIComponent"
                },
                "deployedBytecode": {
                    "type": "string",
                    "example": "0x6080604052348015600f57600080f..."
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.ABIComponent"
                    }
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.ABIComponent"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "ERC20"
                },
                "registry": {
                    "type": "string",
                    "example": "registry.consensys.net/orchestrate"
                },
                "tag": {
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        },
        "api.CreateAccountRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "chain": {
                    "type": "string",
                    "example": "besu"
                },
                "storeID": {
                    "type": "string",
                    "example": "qkmStoreID"
                }
            }
        },
        "api.CreateJobRequest": {
            "type": "object",
            "required": [
                "chainUUID",
                "scheduleUUID",
                "transaction",
                "type"
            ],
            "properties": {
                "annotations": {
                    "$ref": "#/definitions/api.Annotations"
                },
                "chainUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nextJobUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "parentJobUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "scheduleUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "transaction": {
                    "$ref": "#/definitions/entities.ETHTransaction"
                },
                "type": {
                    "type": "string",
                    "example": "eth://ethereum/transaction"
                }
            }
        },
        "api.CreateScheduleRequest": {
            "type": "object"
        },
        "api.DeployContractParams": {
            "type": "object",
            "required": [
                "contractName"
            ],
            "properties": {
                "accessList": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "contractName": {
                    "type": "string",
                    "example": "MyContract"
                },
                "contractTag": {
                    "type": "string",
                    "example": "v1.1.0"
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "integer",
                    "example": 300000
                },
                "gasPrice": {
                    "type": "string",
                    "example": "0x5208"
                },
                "gasPricePolicy": {
                    "$ref": "#/definitions/api.GasPriceParams"
                },
                "mandatoryFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "maxFeePerGas": {
                    "type": "string",
                    "example": "0x4c4b40"
                },
                "maxPriorityFeePerGas": {
                    "type": "string",
                    "example": "0x59682f00"
                },
                "oneTimeKey": {
                    "type": "boolean",
                    "example": true
                },
                "privacyFlag": {
                    "type": "integer",
                    "example": 0
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "protocol": {
                    "type": "string",
                    "example": "Tessera"
                },
                "transactionType": {
                    "type": "string",
                    "enum": [
                        "legacy",
                        "dynamic_fee"
                    ],
                    "example": "dynamic_fee"
                },
                "value": {
                    "type": "string",
                    "example": "0x59682f00"
                }
            }
        },
        "api.DeployContractRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "$ref": "#/definitions/api.DeployContractParams"
                }
            }
        },
        "api.FaucetResponse": {
            "type": "object",
            "required": [
                "amount",
                "cooldown",
                "maxBalance",
                "name"
            ],
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "0xD529AE9E860000"
                },
                "chainRule": {
                    "type": "string",
                    "example": "mainnet"
                },
                "cooldown": {
                    "type": "string",
                    "example": "10s"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "creditorAccount": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "maxBalance": {
                    "type": "string",
                    "example": "0x16345785D8A0000"
                },
                "name": {
                    "type": "string",
                    "example": "faucet-mainnet"
                },
                "tenantID": {
                    "type": "string",
                    "example": "foo"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "uuid": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "api.GasPriceParams": {
            "type": "object",
            "properties": {
                "priority": {
                    "type": "string",
                    "example": "very-high"
                },
                "retryPolicy": {
                    "$ref": "#/definitions/api.RetryParams"
                }
            }
        },
        "api.GetContractEventsBySignHashResponse": {
            "type": "object",
            "properties": {
                "defaultEvents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[{anonymous:false",
                        "inputs:[{indexed:true",
                        "name:from",
                        "type:address}",
                        "{indexed:true",
                        "name:to",
                        "type:address}",
                        "{indexed:false",
                        "name:value",
                        "type:uint256}]",
                        "name:Transfer",
                        "type:event}",
                        "..."
                    ]
                },
                "event": {
                    "type": "string",
                    "example": "{anonymous:false,inputs:[{indexed:true,name:from,type:address},{indexed:true,name:to,type:address},{indexed:false,name:value,type:uint256}],name:Transfer,type:event}"
                }
            }
        },
        "api.ImportAccountRequest": {
            "type": "object",
            "required": [
                "privateKey"
            ],
            "properties": {
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "chain": {
                    "type": "string",
                    "example": "quorum"
                },
                "privateKey": {
                    "type": "string",
                    "example": "0x66232652FDFFD802B7252A456DBD8F3ECC0352BBDE76C23B40AFE8AEBD714E2D"
                },
                "storeID": {
                    "type": "string",
                    "example": "qkmStoreID"
                }
            }
        },
        "api.IntervalRetryParams": {
            "type": "object",
            "properties": {
                "interval": {
                    "type": "string",
                    "example": "2m"
                }
            }
        },
        "api.JobResponse": {
            "type": "object",
            "properties": {
                "annotations": {
                    "$ref": "#/definitions/api.Annotations"
                },
                "chainUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Log"
                    }
                },
                "nextJobUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "ownerID": {
                    "type": "string",
                    "example": "foo"
                },
                "parentJobUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "scheduleUUID": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                },
                "status": {
                    "type": "string",
                    "example": "MINED"
                },
                "tenantID": {
                    "type": "string",
                    "example": "foo"
                },
                "transaction": {
                    "$ref": "#/definitions/entities.ETHTransaction"
                },
                "type": {
                    "type": "string",
                    "example": "eth://ethereum/transaction"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "uuid": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "api.PrivateTxManagerRequest": {
            "type": "object",
            "required": [
                "type",
                "url"
            ],
            "properties": {
                "type": {
                    "description": "Currently supports `Tessera` and `EEA``.",
                    "type": "string",
                    "example": "Tessera"
                },
                "url": {
                    "description": "Transaction manager endpoint.",
                    "type": "string",
                    "example": "http://tessera:3000"
                }
            }
        },
        "api.RawTransactionParams": {
            "type": "object",
            "required": [
                "raw"
            ],
            "properties": {
                "raw": {
                    "type": "string",
                    "example": "0xfe378324abcde723"
                },
                "retryPolicy": {
                    "$ref": "#/definitions/api.IntervalRetryParams"
                }
            }
        },
        "api.RawTransactionRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "$ref": "#/definitions/api.RawTransactionParams"
                }
            }
        },
        "api.RegisterChainRequest": {
            "type": "object",
            "required": [
                "name",
                "urls"
            ],
            "properties": {
                "labels": {
                    "description": "List of custom labels. Useful for adding custom information to the chain.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "listener": {
                    "$ref": "#/definitions/api.RegisterListenerRequest"
                },
                "name": {
                    "description": "Name of the chain. Must be unique.",
                    "type": "string",
                    "example": "mainnet"
                },
                "privateTxManager": {
                    "$ref": "#/definitions/api.PrivateTxManagerRequest"
                },
                "urls": {
                    "description": "List of URLs of Ethereum nodes to connect to.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "https://mainnet.infura.io/v3/a73136601e6f4924a0baa4ed880b535e"
                    ]
                }
            }
        },
        "api.RegisterContractRequest": {
            "type": "object",
            "required": [
                "abi",
                "name"
            ],
            "properties": {
                "abi": {
                    "type": "object"
                },
                "bytecode": {
                    "type": "string",
                    "example": "0x6080604052348015600f57600080f"
                },
                "deployedBytecode": {
                    "type": "string",
                    "example": "0x6080604052348015600f57600080f"
                },
                "name": {
                    "type": "string",
                    "example": "ERC20"
                },
                "tag": {
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        },
        "api.RegisterFaucetRequest": {
            "type": "object",
            "required": [
                "amount",
                "chainRule",
                "cooldown",
                "creditorAccount",
                "maxBalance",
                "name"
            ],
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "0xF4240"
                },
                "chainRule": {
                    "type": "string",
                    "example": "mainnet"
                },
                "cooldown": {
                    "type": "string",
                    "example": "10s"
                },
                "creditorAccount": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "maxBalance": {
                    "type": "string",
                    "example": "0x254582f40"
                },
                "name": {
                    "type": "string",
                    "example": "faucet-mainnet"
                }
            }
        },
        "api.RegisterListenerRequest": {
            "type": "object",
            "properties": {
                "backOffDuration": {
                    "description": "Time to wait before trying to fetch a new mined block (for example `1s` or `1m`, default is `5s`).",
                    "type": "string",
                    "example": "1s"
                },
                "depth": {
                    "description": "Block depth after which the Transaction Listener considers a block final and processes it (default 0).",
                    "type": "integer",
                    "example": 0
                },
                "externalTxEnabled": {
                    "description": "Whether to listen to external transactions not crafted by Orchestrate (default `false`).",
                    "type": "boolean",
                    "example": false
                },
                "fromBlock": {
                    "description": "Block from which the Transaction Listener should start processing transactions (default `latest`).",
                    "type": "string",
                    "example": "latest"
                }
            }
        },
        "api.RetryParams": {
            "type": "object",
            "properties": {
                "increment": {
                    "type": "number",
                    "example": 0.05
                },
                "interval": {
                    "type": "string",
                    "example": "2m"
                },
                "limit": {
                    "type": "number",
                    "example": 0.5
                }
            }
        },
        "api.ScheduleResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.JobResponse"
                    }
                },
                "ownerID": {
                    "type": "string",
                    "example": "foo"
                },
                "tenantID": {
                    "type": "string",
                    "example": "tenant_id"
                },
                "uuid": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "api.SendTransactionRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "$ref": "#/definitions/api.TransactionParams"
                }
            }
        },
        "api.SetContractCodeHashRequest": {
            "type": "object",
            "required": [
                "code_hash"
            ],
            "properties": {
                "code_hash": {
                    "type": "string",
                    "example": "0x6080604052348015600f57600080f"
                }
            }
        },
        "api.SignMessageRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "0xfeade..."
                },
                "storeID": {
                    "type": "string",
                    "example": "qkmStoreID"
                }
            }
        },
        "api.SignTypedDataRequest": {
            "type": "object",
            "required": [
                "domainSeparator",
                "message",
                "messageType",
                "types"
            ],
            "properties": {
                "domainSeparator": {
                    "$ref": "#/definitions/types.DomainSeparator"
                },
                "message": {
                    "type": "object",
                    "additionalProperties": true
                },
                "messageType": {
                    "type": "string",
                    "example": "Mail"
                },
                "storeID": {
                    "type": "string",
                    "example": "qkmStoreID"
                },
                "types": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/types.Type"
                        }
                    }
                }
            }
        },
        "api.TransactionParams": {
            "type": "object",
            "required": [
                "contractName",
                "methodSignature",
                "to"
            ],
            "properties": {
                "accessList": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "contractName": {
                    "type": "string",
                    "example": "MyContract"
                },
                "contractTag": {
                    "type": "string",
                    "example": "v1.1.0"
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e097285534"
                },
                "gas": {
                    "type": "integer",
                    "example": 50000
                },
                "gasPrice": {
                    "type": "string",
                    "example": "0xAB208"
                },
                "gasPricePolicy": {
                    "$ref": "#/definitions/api.GasPriceParams"
                },
                "mandatoryFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "maxFeePerGas": {
                    "type": "string",
                    "example": "0x4c4b40"
                },
                "maxPriorityFeePerGas": {
                    "type": "string",
                    "example": "0x59682f00"
                },
                "methodSignature": {
                    "type": "string",
                    "example": "transfer(address,uint256)"
                },
                "oneTimeKey": {
                    "type": "boolean",
                    "example": true
                },
                "privacyFlag": {
                    "type": "integer",
                    "example": 0
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "protocol": {
                    "type": "string",
                    "example": "Tessera"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "transactionType": {
                    "type": "string",
                    "enum": [
                        "legacy",
                        "dynamic_fee"
                    ],
                    "example": "dynamic_fee"
                },
                "value": {
                    "type": "string",
                    "example": "0x44300E0"
                }
            }
        },
        "api.TransactionResponse": {
            "type": "object",
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "idempotencyKey": {
                    "type": "string",
                    "example": "myIdempotencyKey"
                },
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.JobResponse"
                    }
                },
                "params": {
                    "$ref": "#/definitions/entities.ETHTransactionParams"
                },
                "uuid": {
                    "type": "string",
                    "example": "b4374e6f-b28a-4bad-b4fe-bda36eaf849c"
                }
            }
        },
        "api.TransferParams": {
            "type": "object",
            "required": [
                "from",
                "to",
                "value"
            ],
            "properties": {
                "accessList": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "integer",
                    "example": 21000
                },
                "gasPrice": {
                    "type": "string",
                    "example": "0x5208"
                },
                "gasPricePolicy": {
                    "$ref": "#/definitions/api.GasPriceParams"
                },
                "maxFeePerGas": {
                    "type": "string",
                    "example": "0x4c4b40"
                },
                "maxPriorityFeePerGas": {
                    "type": "string",
                    "example": "0x59682f00"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "transactionType": {
                    "type": "string",
                    "enum": [
                        "legacy",
                        "dynamic_fee"
                    ],
                    "example": "dynamic_fee"
                },
                "value": {
                    "type": "string",
                    "example": "0x59682f00"
                }
            }
        },
        "api.TransferRequest": {
            "type": "object",
            "required": [
                "chain",
                "params"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "example": "myChain"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "params": {
                    "$ref": "#/definitions/api.TransferParams"
                }
            }
        },
        "api.UpdateAccountRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "storeID": {
                    "type": "string",
                    "example": "qkmStoreID"
                }
            }
        },
        "api.UpdateChainRequest": {
            "type": "object",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "listener": {
                    "$ref": "#/definitions/api.UpdateListenerRequest"
                },
                "name": {
                    "type": "string",
                    "example": "mainnet"
                },
                "privateTxManager": {
                    "$ref": "#/definitions/api.PrivateTxManagerRequest"
                }
            }
        },
        "api.UpdateFaucetRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string",
                    "example": "0x254582f40"
                },
                "chainRule": {
                    "type": "string",
                    "example": "mainnet"
                },
                "cooldown": {
                    "type": "string",
                    "example": "10s"
                },
                "creditorAccount": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "maxBalance": {
                    "type": "string",
                    "example": "0x254582f40"
                },
                "name": {
                    "type": "string",
                    "example": "faucet-mainnet"
                }
            }
        },
        "api.UpdateJobRequest": {
            "type": "object",
            "properties": {
                "annotations": {
                    "$ref": "#/definitions/api.Annotations"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Update message"
                },
                "status": {
                    "type": "string",
                    "example": "MINED"
                },
                "transaction": {
                    "$ref": "#/definitions/entities.ETHTransaction"
                }
            }
        },
        "api.UpdateListenerRequest": {
            "type": "object",
            "properties": {
                "backOffDuration": {
                    "type": "string",
                    "example": "1s"
                },
                "currentBlock": {
                    "type": "integer",
                    "example": 1
                },
                "depth": {
                    "type": "integer",
                    "example": 0
                },
                "externalTxEnabled": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "entities.ABIComponent": {
            "type": "object",
            "properties": {
                "abi": {
                    "type": "string",
                    "example": "[{anonymous: false, inputs: [{indexed: false, name: account, type: address}, name: MinterAdded, type: event}]}]"
                },
                "signature": {
                    "type": "string",
                    "example": "transfer(address,uint256)"
                }
            }
        },
        "entities.ETHTransaction": {
            "type": "object",
            "properties": {
                "accessList": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "data": {
                    "type": "string",
                    "example": "0xfe378324abcde723"
                },
                "enclaveKey": {
                    "type": "string",
                    "example": "0xd41551c714c8ec769d2edad9adc250ae955d263da161bf59142b7500eea6715eadc250ae955d263da161bf59142b7500eea6715e"
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "integer",
                    "example": 21000
                },
                "gasPrice": {
                    "type": "string",
                    "example": "0x5208"
                },
                "hash": {
                    "type": "string",
                    "example": "0xd41551c714c8ec769d2edad9adc250ae955d263da161bf59142b7500eea6715e"
                },
                "mandatoryFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "maxFeePerGas": {
                    "type": "string",
                    "example": "0x4c4b40"
                },
                "maxPriorityFeePerGas": {
                    "type": "string",
                    "example": "0x59682f00"
                },
                "nonce": {
                    "type": "integer",
                    "example": 1
                },
                "privacyFlag": {
                    "type": "integer",
                    "example": 1
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "raw": {
                    "type": "string",
                    "example": "0xfe378324abcde723"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "transactionType": {
                    "type": "string",
                    "enum": [
                        "legacy",
                        "dynamic_fee"
                    ],
                    "example": "dynamic_fee"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "value": {
                    "type": "string",
                    "example": "0x59682f00"
                }
            }
        },
        "entities.ETHTransactionParams": {
            "type": "object",
            "properties": {
                "accessList": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "contractName": {
                    "type": "string",
                    "example": "MyContract"
                },
                "contractTag": {
                    "type": "string",
                    "example": "v1.1.0"
                },
                "from": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "gas": {
                    "type": "integer",
                    "example": 21000
                },
                "gasPrice": {
                    "type": "string",
                    "example": "0x5208"
                },
                "mandatoryFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "maxFeePerGas": {
                    "type": "string",
                    "example": "0x4c4b40"
                },
                "maxPriorityFeePerGas": {
                    "type": "string",
                    "example": "0x59682f00"
                },
                "methodSignature": {
                    "type": "string",
                    "example": "transfer(address,uint256)"
                },
                "nonce": {
                    "type": "integer",
                    "example": 1
                },
                "privacyFlag": {
                    "type": "integer",
                    "example": 0
                },
                "privacyGroupId": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "privateFor": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=",
                        "B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=]"
                    ]
                },
                "privateFrom": {
                    "type": "string",
                    "example": "A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo="
                },
                "protocol": {
                    "type": "string",
                    "example": "Tessera"
                },
                "raw": {
                    "type": "string",
                    "example": "0xfe378324abcde723"
                },
                "to": {
                    "type": "string",
                    "example": "0x1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "transactionType": {
                    "type": "string",
                    "enum": [
                        "legacy",
                        "dynamic_fee"
                    ],
                    "example": "dynamic_fee"
                },
                "value": {
                    "type": "string",
                    "example": "0x59682f00"
                }
            }
        },
        "entities.Log": {
            "type": "object",
            "properties": {
                "at": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "message": {
                    "type": "string",
                    "example": "Log message"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entities.PrivateTxManager": {
            "type": "object",
            "properties": {
                "chainUUID": {
                    "description": "UUID of the registered chain.",
                    "type": "string"
                },
                "createdAt": {
                    "description": "Date and time that the private transaction manager was registered with the chain.",
                    "type": "string"
                },
                "type": {
                    "description": "Currently supports `Tessera` and `EEA`.",
                    "type": "string"
                },
                "url": {
                    "description": "Transaction manager endpoint.",
                    "type": "string"
                },
                "uuid": {
                    "description": "UUID of the private transaction manager.",
                    "type": "string"
                }
            }
        },
        "httputil.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 24000
                },
                "message": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "types.DomainSeparator": {
            "type": "object",
            "required": [
                "chainID",
                "name",
                "version"
            ],
            "properties": {
                "chainID": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "MyDApp"
                },
                "salt": {
                    "type": "string",
                    "example": "some-random-string"
                },
                "verifyingContract": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "version": {
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        },
        "types.SignTypedDataRequest": {
            "type": "object",
            "required": [
                "domainSeparator",
                "message",
                "messageType",
                "types"
            ],
            "properties": {
                "domainSeparator": {
                    "$ref": "#/definitions/types.DomainSeparator"
                },
                "message": {
                    "type": "object",
                    "additionalProperties": true
                },
                "messageType": {
                    "type": "string",
                    "example": "Mail"
                },
                "types": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/types.Type"
                        }
                    }
                }
            }
        },
        "types.Type": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "fieldName"
                },
                "type": {
                    "type": "string",
                    "example": "string"
                }
            }
        },
        "types.VerifyRequest": {
            "type": "object",
            "required": [
                "address",
                "data",
                "signature"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "data": {
                    "type": "string",
                    "example": "0xfeaeee..."
                },
                "signature": {
                    "type": "string",
                    "example": "0x6019a3c8..."
                }
            }
        },
        "types.VerifyTypedDataRequest": {
            "type": "object",
            "required": [
                "address",
                "data",
                "signature"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "data": {
                    "$ref": "#/definitions/types.SignTypedDataRequest"
                },
                "signature": {
                    "type": "string",
                    "example": "0x6019a3c8..."
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "JWTAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}